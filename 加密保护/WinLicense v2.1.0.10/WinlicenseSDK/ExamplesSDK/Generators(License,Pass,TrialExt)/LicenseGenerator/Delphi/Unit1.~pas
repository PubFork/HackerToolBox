unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, ComCtrls, WinlicenseSDK;

const
LicenseHash = 'yuhsdf873hJHslk99423jhdsfhGSDKURKCFNB78934hGDMNF5634GfghwyIPahfurH6394hfJfhUYfikfhu8whj3yHYFIOOFhNFAPWRE';

type
  TForm1 = class(TForm)
    GroupBox1: TGroupBox;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    NameEdit: TEdit;
    OrgEdit: TEdit;
    HardIdEdit: TEdit;
    CustomEdit: TEdit;
    GroupBox2: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    NumDaysEdit: TEdit;
    NumExecEdit: TEdit;
    ExpDate: TDateTimePicker;
    EnableDateCheck: TCheckBox;
    GroupBox3: TGroupBox;
    GroupBox4: TGroupBox;
    Label4: TLabel;
    FileNameEdit: TEdit;
    GenFileKey: TButton;
    GroupBox5: TGroupBox;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    RegistryEdit: TEdit;
    Button2: TButton;
    Edit3: TEdit;
    RegValueEdit: TEdit;
    LicRegEdit: TEdit;
    RadioGroup1: TRadioGroup;
    Button3: TButton;
    GroupBox6: TGroupBox;
    Button4: TButton;
    SmartEdit: TEdit;
    TextKeyMemo: TMemo;
    procedure GenFileKeyClick(Sender: TObject);
    procedure EnableDateCheckClick(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
  private
     { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.GenFileKeyClick(Sender: TObject);
var

  ExpDateSysTime: SYSTEMTIME;
  LicenseKeyBuff: ARRAY[0..1000] of char;
  SizeKey, mDays, mExec, i: integer;
  pName: PChar;
  pOrg: PChar;
  pCustom: PChar;
  pHardId: PChar;
  pExpDateSysTime: ^SYSTEMTIME;
  NumDays, NumExec: integer;
  KeyFile: FILE OF char;

begin

  if length(NameEdit.Text) = 0 then
    pName := nil
  else
    pName := PChar(NameEdit.Text);

  if length(OrgEdit.Text) = 0 then
    pOrg := nil
  else
    pOrg := PChar(OrgEdit.Text);

  if length(CustomEdit.Text) = 0 then
    pCustom := nil
  else
    pCustom := PChar(CustomEdit.Text);

  if length(HardIdEdit.Text) = 0 then
    pHardId := nil
  else
    pHardId := PChar(HardIdEdit.Text);

  if length(NumDaysEdit.Text) = 0 then
    NumDays := 0
  else
    NumDays := StrToInt(NumDaysEdit.Text);

  if length(NumExecEdit.Text) = 0 then
    NumExec := 0
  else
    NumExec := StrToInt(NumExecEdit.Text);

  if EnableDateCheck.Checked = False  then
    pExpDateSysTime := nil
  else
  begin
    DateTimeToSystemTime(ExpDate.Date, ExpDateSysTime);
    pExpDateSysTime := addr(ExpDateSysTime)
  end;

  SizeKey := WLGenLicenseFileKey(LicenseHash, pName, pOrg, pCustom, pHardId, NumDays, NumExec, pExpDateSysTime, 0, 0, 0, LicenseKeyBuff) ;

 // save generated key in user file

 AssignFile(KeyFile, FileNameEdit.Text);

 Rewrite(KeyFile);

 for i:= 0 TO SizeKey-1 DO
   Write(KeyFile, LicenseKeyBuff[i]);

 CloseFile(KeyFile);

  MessageBox(0, 'A License key file has been generated', 'License Key Generator SDK', MB_OK);

end;

procedure TForm1.EnableDateCheckClick(Sender: TObject);
begin

 if EnableDateCheck.State =  cbChecked  then
    ExpDate.Enabled := True
 else
    ExpDate.Enabled := False;


end;

procedure TForm1.Button3Click(Sender: TObject);

var

  ExpDateSysTime: SYSTEMTIME;
  LicenseKeyBuff: ARRAY[0..1000] of char;
  SizeKey, mDays, mExec, i: integer;
  pName: PChar;
  pOrg: PChar;
  pCustom: PChar;
  pHardId: PChar;
  pExpDateSysTime: ^SYSTEMTIME;
  NumDays, NumExec: integer;
  KeyFile: FILE OF char;

begin

  if length(NameEdit.Text) = 0 then
    pName := nil
  else
    pName := PChar(NameEdit.Text);

  if length(OrgEdit.Text) = 0 then
    pOrg := nil
  else
    pOrg := PChar(OrgEdit.Text);

  if length(CustomEdit.Text) = 0 then
    pCustom := nil
  else
    pCustom := PChar(CustomEdit.Text);

  if length(HardIdEdit.Text) = 0 then
    pHardId := nil
  else
    pHardId := PChar(HardIdEdit.Text);

  if length(NumDaysEdit.Text) = 0 then
    NumDays := 0
  else
    NumDays := StrToInt(NumDaysEdit.Text);

  if length(NumExecEdit.Text) = 0 then
    NumExec := 0
  else
    NumExec := StrToInt(NumExecEdit.Text);

  if EnableDateCheck.Checked = False  then
    pExpDateSysTime := nil
  else
  begin
    DateTimeToSystemTime(ExpDate.Date, ExpDateSysTime);
    pExpDateSysTime := addr(ExpDateSysTime)
  end;

  SizeKey := WLGenLicenseTextKey(LicenseHash, pName, pOrg, pCustom, pHardId, NumDays, NumExec, pExpDateSysTime, 0, 0, 0, LicenseKeyBuff) ;
  TextKeyMemo.Text := LicenseKeyBuff;

end;

procedure TForm1.Button4Click(Sender: TObject);
var

  ExpDateSysTime: SYSTEMTIME;
  LicenseKeyBuff: ARRAY[0..1000] of char;
  SizeKey, mDays, mExec, i: integer;
  pName: PChar;
  pOrg: PChar;
  pCustom: PChar;
  pHardId: PChar;
  pExpDateSysTime: ^SYSTEMTIME;
  NumDays, NumExec: integer;
  KeyFile: FILE OF char;

begin

  if length(NameEdit.Text) = 0 then
    pName := nil
  else
    pName := PChar(NameEdit.Text);

  if length(OrgEdit.Text) = 0 then
    pOrg := nil
  else
    pOrg := PChar(OrgEdit.Text);

  if length(CustomEdit.Text) = 0 then
    pCustom := nil
  else
    pCustom := PChar(CustomEdit.Text);

  if length(HardIdEdit.Text) = 0 then
    pHardId := nil
  else
    pHardId := PChar(HardIdEdit.Text);

  if length(NumDaysEdit.Text) = 0 then
    NumDays := 0
  else
    NumDays := StrToInt(NumDaysEdit.Text);

  if length(NumExecEdit.Text) = 0 then
    NumExec := 0
  else
    NumExec := StrToInt(NumExecEdit.Text);

  if EnableDateCheck.Checked = False  then
    pExpDateSysTime := nil
  else
  begin
    DateTimeToSystemTime(ExpDate.Date, ExpDateSysTime);
    pExpDateSysTime := addr(ExpDateSysTime)
  end;
                     
  SizeKey := WLGenLicenseSmartKey(LicenseHash, pName, pOrg, pCustom, pHardId, NumDays, NumExec, pExpDateSysTime, LicenseKeyBuff) ;
  SmartEdit.Text := LicenseKeyBuff;

end;

procedure TForm1.Button2Click(Sender: TObject);

var

  ExpDateSysTime: SYSTEMTIME;
  LicenseKeyBuff: ARRAY[0..1000] of char;
  SizeKey, mDays, mExec, i: integer;
  pName: PChar;
  pOrg: PChar;
  pCustom: PChar;
  pHardId: PChar;
  pExpDateSysTime: ^SYSTEMTIME;
  NumDays, NumExec: integer;
  KeyFile: FILE OF char;

begin

  if length(NameEdit.Text) = 0 then
    pName := nil
  else
    pName := PChar(NameEdit.Text);

  if length(OrgEdit.Text) = 0 then
    pOrg := nil
  else
    pOrg := PChar(OrgEdit.Text);

  if length(CustomEdit.Text) = 0 then
    pCustom := nil
  else
    pCustom := PChar(CustomEdit.Text);

  if length(HardIdEdit.Text) = 0 then
    pHardId := nil
  else
    pHardId := PChar(HardIdEdit.Text);

  if length(NumDaysEdit.Text) = 0 then
    NumDays := 0
  else
    NumDays := StrToInt(NumDaysEdit.Text);

  if length(NumExecEdit.Text) = 0 then
    NumExec := 0
  else
    NumExec := StrToInt(NumExecEdit.Text);

  if EnableDateCheck.Checked = False  then
    pExpDateSysTime := nil
  else
  begin
    DateTimeToSystemTime(ExpDate.Date, ExpDateSysTime);
    pExpDateSysTime := addr(ExpDateSysTime)
  end;

  SizeKey := WLGenLicenseRegistryKey(LicenseHash, pName, pOrg, pCustom, pHardId, NumDays, NumExec, pExpDateSysTime, 0, 0, 0, PChar('HKEY_LOCAL_MACHINE\' + RegistryEdit.Text), PChar(RegValueEdit.Text), LicenseKeyBuff) ;

 // save generated key in user file

 AssignFile(KeyFile, LicRegEdit.Text);

 Rewrite(KeyFile);

 for i:= 0 TO SizeKey-1 DO
   Write(KeyFile, LicenseKeyBuff[i]);

 CloseFile(KeyFile);

  MessageBox(0, 'A License key file has been generated', 'License Key Generator SDK', MB_OK);

end;

end.
