#include "stdafx.h"


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 头文件
#include <Windows.h>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
#pragma comment(linker, "/EXPORT:Noname1=_AheadLib_Noname1,@1,NONAME")
#pragma comment(linker, "/EXPORT:Noname2=_AheadLib_Noname2,@2,NONAME")
#pragma comment(linker, "/EXPORT:Noname3=_AheadLib_Noname3,@3,NONAME")
#pragma comment(linker, "/EXPORT:Noname4=_AheadLib_Noname4,@4,NONAME")
#pragma comment(linker, "/EXPORT:Noname5=_AheadLib_Noname5,@5,NONAME")
#pragma comment(linker, "/EXPORT:Noname6=_AheadLib_Noname6,@6,NONAME")
#pragma comment(linker, "/EXPORT:Noname7=_AheadLib_Noname7,@7,NONAME")
#pragma comment(linker, "/EXPORT:Noname8=_AheadLib_Noname8,@8,NONAME")
#pragma comment(linker, "/EXPORT:Noname9=_AheadLib_Noname9,@9,NONAME")
#pragma comment(linker, "/EXPORT:Noname10=_AheadLib_Noname10,@10,NONAME")
#pragma comment(linker, "/EXPORT:Noname11=_AheadLib_Noname11,@11,NONAME")
#pragma comment(linker, "/EXPORT:Noname12=_AheadLib_Noname12,@12,NONAME")
#pragma comment(linker, "/EXPORT:Noname13=_AheadLib_Noname13,@13,NONAME")
#pragma comment(linker, "/EXPORT:Noname14=_AheadLib_Noname14,@14,NONAME")
#pragma comment(linker, "/EXPORT:Noname15=_AheadLib_Noname15,@15,NONAME")
#pragma comment(linker, "/EXPORT:Noname16=_AheadLib_Noname16,@16,NONAME")
#pragma comment(linker, "/EXPORT:Noname17=_AheadLib_Noname17,@17,NONAME")
#pragma comment(linker, "/EXPORT:Noname18=_AheadLib_Noname18,@18,NONAME")
#pragma comment(linker, "/EXPORT:Noname19=_AheadLib_Noname19,@19,NONAME")
#pragma comment(linker, "/EXPORT:Noname20=_AheadLib_Noname20,@20,NONAME")
#pragma comment(linker, "/EXPORT:Noname21=_AheadLib_Noname21,@21,NONAME")
#pragma comment(linker, "/EXPORT:Noname22=_AheadLib_Noname22,@22,NONAME")
#pragma comment(linker, "/EXPORT:Noname23=_AheadLib_Noname23,@23,NONAME")
#pragma comment(linker, "/EXPORT:Noname24=_AheadLib_Noname24,@24,NONAME")
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 宏定义
#define EXTERNC extern "C"
#define NAKED __declspec(naked)
#define EXPORT __declspec(dllexport)

#define ALCPP EXPORT NAKED
#define ALSTD EXTERNC EXPORT NAKED void __stdcall
#define ALCFAST EXTERNC EXPORT NAKED void __fastcall
#define ALCDECL EXTERNC NAKED void __cdecl
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AheadLib 命名空间
namespace AheadLib
{
	HMODULE m_hModule = NULL;	// 原始模块句柄
	DWORD m_dwReturn[25] = {0};	// 原始函数返回地址


	// 加载原始模块
	inline BOOL WINAPI Load()
	{
		TCHAR tzPath[MAX_PATH];
		TCHAR tzTemp[MAX_PATH * 2];

		lstrcpy(tzPath, TEXT("VP_Sdk.dll"));
		m_hModule = LoadLibrary(tzPath);
		if (m_hModule == NULL)
		{
			wsprintf(tzTemp, TEXT("无法加载 %s，程序无法正常运行。"), tzPath);
			MessageBox(NULL, tzTemp, TEXT("AheadLib"), MB_ICONSTOP);
		}

		return (m_hModule != NULL);	
	}
		
	// 释放原始模块
	inline VOID WINAPI Free()
	{
		if (m_hModule)
		{
			FreeLibrary(m_hModule);
		}
	}

	// 获取原始函数地址
	FARPROC WINAPI GetAddress(PCSTR pszProcName)
	{
		FARPROC fpAddress;
		CHAR szProcName[16];
		TCHAR tzTemp[MAX_PATH];

		fpAddress = GetProcAddress(m_hModule, pszProcName);
		if (fpAddress == NULL)
		{
			if (HIWORD(pszProcName) == 0)
			{
				wsprintf(szProcName, "%d", pszProcName);
				pszProcName = szProcName;
			}

			wsprintf(tzTemp, TEXT("无法找到函数 %hs，程序无法正常运行。"), pszProcName);
			MessageBox(NULL, tzTemp, TEXT("AheadLib"), MB_ICONSTOP);
			ExitProcess(-2);
		}

		return fpAddress;
	}
}
using namespace AheadLib;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


BOOL WINAPI MyLoad()
{
    return Load();
}

VOID WINAPI MyFree()
{
	Free();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 入口函数
//BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)
//{
//	if (dwReason == DLL_PROCESS_ATTACH)
//	{
//		DisableThreadLibraryCalls(hModule);
//
//		return Load();
//	}
//	else if (dwReason == DLL_PROCESS_DETACH)
//	{
//		Free();
//	}
//
//	return TRUE;
//}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname1(void)
{
	GetAddress(MAKEINTRESOURCE(1));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname2(void)
{
	GetAddress(MAKEINTRESOURCE(2));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname3(void)
{
	GetAddress(MAKEINTRESOURCE(3));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname4(void)
{
	GetAddress(MAKEINTRESOURCE(4));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname5(void)
{
	GetAddress(MAKEINTRESOURCE(5));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname6(void)
{
	GetAddress(MAKEINTRESOURCE(6));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname7(void)
{
	GetAddress(MAKEINTRESOURCE(7));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname8(void)
{
	GetAddress(MAKEINTRESOURCE(8));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname9(void)
{
	GetAddress(MAKEINTRESOURCE(9));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname10(void)
{
	GetAddress(MAKEINTRESOURCE(10));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname11(void)
{
	GetAddress(MAKEINTRESOURCE(11));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname12(void)
{
	GetAddress(MAKEINTRESOURCE(12));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname13(void)
{
	GetAddress(MAKEINTRESOURCE(13));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname14(void)
{
	GetAddress(MAKEINTRESOURCE(14));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname15(void)
{
	GetAddress(MAKEINTRESOURCE(15));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname16(void)
{
	GetAddress(MAKEINTRESOURCE(16));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname17(void)
{
	GetAddress(MAKEINTRESOURCE(17));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname18(void)
{
	GetAddress(MAKEINTRESOURCE(18));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname19(void)
{
	GetAddress(MAKEINTRESOURCE(19));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname20(void)
{
	GetAddress(MAKEINTRESOURCE(20));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname21(void)
{
	GetAddress(MAKEINTRESOURCE(21));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname22(void)
{
	GetAddress(MAKEINTRESOURCE(22));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname23(void)
{
	GetAddress(MAKEINTRESOURCE(23));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Noname24(void)
{
	GetAddress(MAKEINTRESOURCE(24));
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCPP unsigned long __stdcall GetFunArray(unsigned long *,unsigned long)
{
	GetAddress("?GetFunArray@@YGKPAKK@Z");
	__asm JMP EAX;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
